program TVGUID05;

uses Objects, Drivers, Views, Menus, App, SysUtils, DateUtils;

const
  WinCount: Integer =   0;
  cmFileOpen        = 100;
  cmNewWin          = 101;

type
  TMyApp = object(TApplication)
    procedure HandleEvent(var Event: TEvent); virtual;
    procedure InitMenuBar; virtual;
    procedure InitStatusLine; virtual;
    procedure NewWindow;
       //Function WordToString: Word; virtual;
  end;

type 
	TimerHelper = object
		FutureTime, PrevTime : TDateTime;
		remHours, remMins, remSecs, remMS, pastHours, pastMins, pastSecs, pastMS : Word;
		secondsRemaining : Integer;
		GoodbyeString : String;
		constructor Init (var FutTime : TDateTime);
		Procedure ChangeDates;
		//Procedure SetTimer;
		Procedure Over (gdByeStr : String);
end;


	constructor TimerHelper.Init(FutTime : TDateTime);
	var secondsBetweenDates : Word;
	hour, min, sec, ms : Word;
	tmpDate : TDateTime;
	begin
		PrevTime := Now;
		FutureTime := FutTime;
		tmpDate := FutTime - Now;
		DecodeTime(tmpDate, hour, min, sec, ms);
		secondsBetweenDates := 3600 * hour + 60 * min + sec;
		
	end;
	
	
	procedure TimerHelper.ChangeDates;
	var current, remainingTime, pastTime : TDateTime;
	tmpms : Word;
	begin
		current := Now;
		pastTime := PrevTime - current;
		remainingTime := FutureTime - current;
		DecodeTime(remainingTime, remHours, remMins, remSecs, tmpms);
		DecodeTime(pastTime, pastHours, pastMins, pastSecs, tmpms);
		secondsRemaining :=  secondsRemaining - 1;
	end;
	
	
	procedure TimerHelper.Over (gdByeStr : String);
	begin
		GoodbyeString := gdByeStr;
	end;
	

  PDemoWindow = ^TDemoWindow;
  TDemoWindow = object(TWindow)
    constructor Init(Bounds: TRect; WinTitle: String; WindowNo: Word);
  end;

  PInterior = ^TInterior;
  TInterior = object(TView)
    constructor Init(var Bounds: TRect);
    procedure Draw; virtual;
  end;

{ TInterior }
constructor TInterior.Init(var Bounds: TRect);
begin
  TView.Init(Bounds);
  GrowMode := gfGrowHiX + gfGrowHiY;
  Options := Options or ofFramed;
end;

procedure TInterior.Draw;
const Days : array[0 .. 6] of String[11] =
   ('Sunday', 'Monday', 'Tuesday',
   'Wednesday', 'Thursday', 'Friday', 'Saturday');
var
  Hour, Min, Sec, HSec  : Word;
  Greeting, OneMoreGreeting: string;
  OneSec : TDateTime;
  Helper : PTimerHelper;
begin
  //GetTime(Hour,Min,Sec,HSec);
  //Greeting := 'Today : ' + Days[Dow] + ', ' + D  + '.'+ M + '.'+ Y ;
 { Greeting := TimeToStr(Time);
  OneMoreGreeting := TimeToStr(Time - StrToTime ('0:0:1'));}
  TView.Draw;
  WriteStr(4, 2, Greeting, $01);
  WriteStr(4, 3, OneMoreGreeting, $01);
  {
	Helper := new Helper.Init(StrToTime(//тут строка с вывода))
    
    // Helper:=New(PTimerHelper, Init(FutDate))
	while (Helper.remainingTime <> 0) do
	begin
		//изменяем строки с оставшимся временем и прошедшем временем
		Helper (^. || . )ChangeDates;
		delay(1000);
	end;
	Helper.Done('Timer Done!');
	// выводим сообщение с помрщью поля goodbye string
  }
  
  
end;

{ TDemoWindow }
constructor TDemoWindow.Init(Bounds: TRect; WinTitle: String; WindowNo: Word);
var
  S: string[3];
  Interior: PInterior;
begin
  Str(WindowNo, S);
  TWindow.Init(Bounds, WinTitle + ' ' + S, wnNoNumber);
  GetClipRect(Bounds);
  Bounds.Grow(-1,-1);
  Interior := New(PInterior, Init(Bounds));
  Insert(Interior);
end;

{ TMyApp }
procedure TMyApp.HandleEvent(var Event: TEvent);
begin
  TApplication.HandleEvent(Event);
  if Event.What = evCommand then
  begin
    case Event.Command of
      cmNewWin: NewWindow;
    else
      Exit;
    end;
    ClearEvent(Event);
  end;
end;

procedure TMyApp.InitMenuBar;
var R: TRect;
begin
  GetExtent(R);
  R.B.Y := R.A.Y + 1;
  MenuBar := New(PMenuBar, Init(R, NewMenu(
    NewSubMenu('~F~ile', hcNoContext, NewMenu(
      NewItem('~O~pen', 'F3', kbF3, cmFileOpen, hcNoContext,
      NewItem('~N~ew', 'F4', kbF4, cmNewWin, hcNoContext,
      NewLine(
      NewItem('E~x~it', 'Alt-X', kbAltX, cmQuit, hcNoContext,
      nil))))),
    NewSubMenu('~W~indow', hcNoContext, NewMenu(
      NewItem('~N~ext', 'F6', kbF6, cmNext, hcNoContext,
      NewItem('~Z~oom', 'F5', kbF5, cmZoom, hcNoContext,
      nil))),
    nil))
  )));
end;

procedure TMyApp.InitStatusLine;
var R: TRect;
begin
  GetExtent(R);
  R.A.Y := R.B.Y - 1;
  StatusLine := New(PStatusLine, Init(R,
    NewStatusDef(0, $FFFF,
      NewStatusKey('', kbF10, cmMenu,
      NewStatusKey('~Alt-X~ Exit', kbAltX, cmQuit,
      NewStatusKey('~F4~ New', kbF4, cmNewWin,
      NewStatusKey('~Alt-F3~ Close', kbAltF3, cmClose,
      nil)))),
    nil)
  ));
end;

procedure TMyApp.NewWindow;
var
  Window: PDemoWindow;
  R: TRect;
begin
  Inc(WinCount);
  R.Assign(0, 0, 24, 7);
  R.Move(Random(55), Random(16));
  Window := New(PDemoWindow, Init(R, 'Demo Window', WinCount));
  DeskTop^.Insert(Window);
end;

var
  MyApp: TMyApp;

begin
  MyApp.Init;
  MyApp.Run;
  MyApp.Done;
end.
